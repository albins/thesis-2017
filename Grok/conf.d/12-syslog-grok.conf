filter {
  if [type] == "syslog" {
      grok {
        patterns_dir   => [ "/etc/logstash/patterns" ]
        match          => { "message" => "%{SYSLOG5424PRI}%{CISCOTIMESTAMP:log_timestamp} \[%{NA_EV_DESC}\]: ?%{GREEDYDATA:body}" }
        add_field      => [ "received_at", "%{@timestamp}" ]
        match          => { "node_name" => "db%{DATA:cluster_name}%{INT}" }
        break_on_match => false
      }
      date {
        match => [ "log_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      }

    # metrics {
    #   meter => "syslog_events"
    #   add_tag => "metric"

    # }

      if [message] =~ ".*[Dd]isk.*" {
          if [message] =~ "\b[0-1][a-d]\.\d{1,2}\.\d{1,2}" {
              grok {
                patterns_dir   => [ "/etc/logstash/patterns" ]
                match          => { "message" => "\b%{DISK_PATTERN}"}
                add_field      => ["disk_location", "%{disk_shelf}.%{disk_bay}"]
              }
            }

            mutate {
              add_tag => ["disk_event"]
            }
     }

     if [event_type] =~ "raid.rg.(opt)?recons.start" {
      grok {
        patterns_dir   => [ "/etc/logstash/patterns" ]
        match => {"body" => "%{NA_SCRUB_STATUS}"}
      }

      mutate {
        add_tag => ["RAID_recons_start"]
      }

    }

    if [event_type] == "raid.rg.recons.done" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns" ]
        match        => {"body" => "%{NA_SCRUB_STATUS}.*in %{HOURS_MINUTES_SECONDS}"}
      }

      ruby {
        code => "event['recons_seconds'] = (event['hours'] or 0) * 3600 + event['minutes'] * 60 + event['seconds']"
      }

      mutate {
        add_tag => ["RAID_recons_done"]
      }
    }

    if [event_type] == "raid.config.spare.disk.failed" {
      mutate {
        add_tag => ["Spare_Disk_FAILED"]
      }
                }

    if [event_type] == "monitor.globalStatus.nonCritical" and "disk" in [body] and "failed" in [body] {
      mutate {
        add_tag => ["RAID_Disk_FAILED"]
      }
    }

    if [event_type] == "raid.disk.predictiveFailure" and "prefailed" in [body] {
      mutate {
        add_tag => ["RAID_Disk_Failing"]
      }
    }

    if [event_type] == "disk.mediaScrubComplete" {
       mutate {
         add_tag   => ["Disk_Scrub_Complete"]
       }

       grok {
         match          => {"body" => "Disk (?<disk>.+?..+?.+?)\ \[.*in (?<scrub_duration>.*) :"}
         break_on_match => false
         match          => {"scrub_duration" => "%{NUMBER:days:int}d:%{NUMBER:hours:int}h:%{NUMBER:minutes:int}m"}
       }

       ruby {
            code => "event['scrub_seconds'] = event['days'] * 24 * 3600 + event['hours'] * 3600 + event['minutes'] * 60"
       }
    }

    if  [event_type] =~ "raid\.rg\.media_scrub\.(done|start|resume|suspend)" {
             grok {
             patterns_dir => [ "/etc/logstash/patterns" ]
             match        => {"body" => "%{NA_SCRUB_STATUS}"}
        }
    }

    if  [event_type] == "raid.rg.media_scrub.suspended" {
        grok {
             patterns_dir => [ "/etc/logstash/patterns" ]
             match        => {"body" => "%{NA_SCRUB_STATUS} media scrub suspended at stripe \d* after %{HOURS_MINUTES_SECONDS}"}
        }

       ruby {
            code => "event['rg_scrub_seconds'] = (event['hours'] or 0) * 3600 + event['minutes'] * 60 + event['seconds']"
       }

        mutate {
                add_tag => ["RG_Scrub_Suspended"]
        }
    }

    if  [event_type] == "raid.rg.media_scrub.start" {
        mutate {
                add_tag => ["RG_Scrub_Started"]
        }

    }

    if  [event_type] == "raid.rg.media_scrub.done" {
        mutate {
                add_tag => ["RG_Scrub_Stopped"]
        }


        grok {
             patterns_dir => [ "/etc/logstash/patterns" ]
             match => {"body" => "%{NA_SCRUB_STATUS} media scrub completed in %{HOURS_MINUTES_SECONDS}"}

       }

       ruby {
            code => "event['rg_scrub_seconds'] = (event['hours'] or 0) * 3600 + event['minutes'] * 60 + event['seconds']"
            }
    }


    if  [event_type] == "raid.rg.media_scrub.resume" {
        mutate {
                add_tag => ["RG_Scrub_Resumed"]
        }
    }

    # dns {
    #   reverse => [ "host" ]  ###Host info comes to Logstash from NetApp as an IP only - using DNS to get the actual hostname###
    #   action  => "replace"  ###relacing that IP with the hostname###
    # }
  }
}
